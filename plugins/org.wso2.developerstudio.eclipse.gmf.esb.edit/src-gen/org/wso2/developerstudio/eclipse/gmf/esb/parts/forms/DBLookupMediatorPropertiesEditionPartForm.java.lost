
Tue Oct 13 17:52:43 IST 2020
================================================================================
Start of user code for loading
	    CompositionSequence dBLookupMediatorStep = new BindingCompositionSequence(propertiesEditionComponent);
	    
        CompositionStep connectionStep = dBLookupMediatorStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.class);
        connectionStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.connectionType);
        connectionStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.databaseConfiguration);
        connectionStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.connectionDsType);
        connectionStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.connectionDsInitialContext);
        connectionStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.connectionDbType);
        connectionStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.isRegistryBasedDriverConfig);
        connectionStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.connectionDbDriver);
        connectionStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.registryBasedDriverConfigKey);
        connectionStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.connectionDsName);
        connectionStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.isRegistryBasedUrlConfig);
        connectionStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.connectionURL);
        connectionStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.registryBasedUrlConfigKey);
        connectionStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.isRegistryBasedUserConfig);
        connectionStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.connectionUsername);
        connectionStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.registryBasedUserConfigKey);
        connectionStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.isRegistryBasedPassConfig);
        connectionStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.connectionPassword);
        connectionStep.addStep(EsbViewsRepository.DBLookupMediator.Connection.registryBasedPassConfigKey);
       
        dBLookupMediatorStep
        .addStep(EsbViewsRepository.DBLookupMediator.Statements.class)
        .addStep(EsbViewsRepository.DBLookupMediator.Statements.sqlStatements);
        
		CompositionStep propertiesStep = dBLookupMediatorStep.addStep(EsbViewsRepository.DBLookupMediator.Properties.class);
		propertiesStep.addStep(EsbViewsRepository.DBLookupMediator.Properties.commentsList);
		propertiesStep.addStep(EsbViewsRepository.DBLookupMediator.Properties.reverse);
		propertiesStep.addStep(EsbViewsRepository.DBLookupMediator.Properties.propertyAutocommit);
		propertiesStep.addStep(EsbViewsRepository.DBLookupMediator.Properties.propertyIsolation);
		propertiesStep.addStep(EsbViewsRepository.DBLookupMediator.Properties.propertyMaxactive);
		propertiesStep.addStep(EsbViewsRepository.DBLookupMediator.Properties.propertyMaxidle);
		propertiesStep.addStep(EsbViewsRepository.DBLookupMediator.Properties.propertyMaxopenstatements);
		propertiesStep.addStep(EsbViewsRepository.DBLookupMediator.Properties.propertyMaxwait);
		propertiesStep.addStep(EsbViewsRepository.DBLookupMediator.Properties.propertyMinidle);
		propertiesStep.addStep(EsbViewsRepository.DBLookupMediator.Properties.propertyPoolstatements);
		propertiesStep.addStep(EsbViewsRepository.DBLookupMediator.Properties.propertyTestonborrow);
		propertiesStep.addStep(EsbViewsRepository.DBLookupMediator.Properties.propertyTestwhileidle);
		propertiesStep.addStep(EsbViewsRepository.DBLookupMediator.Properties.propertyValidationquery);
		propertiesStep.addStep(EsbViewsRepository.DBLookupMediator.Properties.propertyInitialsize);
		
		dBLookupMediatorStep
			.addStep(EsbViewsRepository.DBLookupMediator.Misc.class)
			.addStep(EsbViewsRepository.DBLookupMediator.Misc.description);
		
		composer = new PartComposer(dBLookupMediatorStep) {

			@Override
			public Composite addToPart(Composite parent, Object key) {
			    if (key == EsbViewsRepository.DBLookupMediator.Connection.class) {
                    return createConnectionGroup(widgetFactory, parent);
                }
				if (key == EsbViewsRepository.DBLookupMediator.Properties.class) {
					return createPropertiesGroup(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Statements.class) {
                    return createStatementsGroup(widgetFactory, parent);
                }
				if (key == EsbViewsRepository.DBLookupMediator.Misc.class) {
                    return createMiscGroup(widgetFactory, parent);
                }
				if (key == EsbViewsRepository.DBLookupMediator.Properties.commentsList) {
					return createCommentsListMultiValuedEditor(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Properties.reverse) {
					return createReverseCheckbox(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Properties.propertyAutocommit) {
					return createPropertyAutocommitEMFComboViewer(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Properties.propertyIsolation) {
					return createPropertyIsolationEMFComboViewer(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Properties.propertyMaxactive) {
					return createPropertyMaxactiveText(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Properties.propertyMaxidle) {
					return createPropertyMaxidleText(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Properties.propertyMaxopenstatements) {
					return createPropertyMaxopenstatementsText(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Properties.propertyMaxwait) {
					return createPropertyMaxwaitText(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Properties.propertyMinidle) {
					return createPropertyMinidleText(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Properties.propertyPoolstatements) {
					return createPropertyPoolstatementsEMFComboViewer(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Properties.propertyTestonborrow) {
					return createPropertyTestonborrowEMFComboViewer(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Properties.propertyTestwhileidle) {
					return createPropertyTestwhileidleEMFComboViewer(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Properties.propertyValidationquery) {
					return createPropertyValidationqueryText(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Properties.propertyInitialsize) {
					return createPropertyInitialsizeText(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Misc.description) {
					return createDescriptionText(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Connection.connectionType) {
					return createConnectionTypeEMFComboViewer(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Connection.connectionDsType) {
					return createConnectionDsTypeEMFComboViewer(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Connection.connectionDsInitialContext) {
					return createConnectionDsInitialContextText(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Connection.connectionDbType) {
					return createConnectionDbTypeEMFComboViewer(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Connection.connectionDbDriver) {
					return createConnectionDbDriverText(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Connection.connectionDsName) {
					return createConnectionDsNameText(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Connection.connectionURL) {
					return createConnectionURLText(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Connection.connectionUsername) {
					return createConnectionUsernameText(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Connection.connectionPassword) {
					return createConnectionPasswordText(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Statements.sqlStatements) {
					return createSqlStatementsTableComposition(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Connection.databaseConfiguration) {
					return createDbConfiguration(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Connection.isRegistryBasedDriverConfig) {
					return createIsRegistryBasedDriverConfigCheckbox(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Connection.isRegistryBasedPassConfig) {
					return createIsRegistryBasedPassConfigCheckbox(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Connection.isRegistryBasedUrlConfig) {
					return createIsRegistryBasedUrlConfigCheckbox(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Connection.isRegistryBasedUserConfig) {
					return createIsRegistryBasedUserConfigCheckbox(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Connection.registryBasedDriverConfigKey) {
					return createRegistryBasedDriverConfigKeyWidget(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Connection.registryBasedPassConfigKey) {
					return createRegistryBasedPassConfigKeyWidget(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Connection.registryBasedUrlConfigKey) {
					return createRegistryBasedUrlConfigKeyWidget(widgetFactory, parent);
				}
				if (key == EsbViewsRepository.DBLookupMediator.Connection.registryBasedUserConfigKey) {
					return createRegistryBasedUserConfigKeyWidget(widgetFactory, parent);
				}
				return parent;
			}
		};
	// End of user code
Start of user code for createDependencyProviderEMFComboViewer
        connectionDbConfiguration = new Control[] { propertyInitializeLabel, dependencyProvider,
                propertyInitializeHelp };
        // End of user code
Start of user code for additional methods
	protected Text registryBasedDriverConfigKeyText;
	protected Text registryBasedUrlConfigKeyText;
	protected Text registryBasedUserConfigKeyText;
	protected Text registryBasedPassConfigKeyText;

	protected RegistryKeyProperty registryBasedDriverConfigKey;
	protected RegistryKeyProperty registryBasedUrlConfigKey;
	protected RegistryKeyProperty registryBasedUserConfigKey;
	protected RegistryKeyProperty registryBasedPassConfigKey;

	protected Section propertiesSection;
	protected Section miscSection;
	protected Section connectionSection;
	protected Section statementsSection;
	
	protected Composite propertiesGroup;
	protected Composite miscGroup;
	protected Composite connectionGroup;
	protected Composite statementsGroup;
	
	protected Control[] commentsListElements;
	protected Control[] reverseElements;
	protected Control[] propertyAutoCommitElements;
	protected Control[] propertyIsolationElements;
	protected Control[] propertyMaxActiveElements;
	protected Control[] propertyMaxIdleElements;
	protected Control[] propertyMaxOpenStatementsElements;
	protected Control[] propertyMaxWaitElements;
	protected Control[] propertyMinidleElements;
	protected Control[] propertyPoolStatementsElements;
	protected Control[] propertyTestonborrowElements;
	protected Control[] propertyTestwhileidleElements;
	protected Control[] propertyValidationQueryElements;
	protected Control[] propertyInitializeElements;
	protected Control[] descriptionElements;
	protected Control[] connectionTypeElements;
	protected Control[] connectionDsTypeElements;
	protected Control[] connectionDsInitialContextElements;
	protected Control[] connectionDbTypeElements;
	protected Control[] connectionDbDriverElements;
	protected Control[] connectionDsNameElements;
	protected Control[] connectionURLElements;
	protected Control[] connectionUsernameElements;
	protected Control[] connectionPasswordElements;
	protected Control[] sqlStatementsElements;
	protected Control[] connectionDbConfiguration;
	protected Control[] isRegistryBasedDriverConfigElements;
	protected Control[] isRegistryBasedUrlConfigElements;
	protected Control[] isRegistryBasedUserConfigElements;
	protected Control[] isRegistryBasedPassConfigElements;
	protected Control[] registryBasedDriverConfigKeyElements;
	protected Control[] registryBasedPassConfigKeyElements;
	protected Control[] registryBasedUserConfigKeyElements;
	protected Control[] registryBasedUrlConfigKeyElements;
	
	String jarPath = "";

	DependencyProvider dp;
	// End of user code
